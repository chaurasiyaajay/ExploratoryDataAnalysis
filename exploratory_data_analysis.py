# -*- coding: utf-8 -*-
"""Exploratory Data Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ukUPziwiFEljcjuhRWpXDyW1q3Xm3pGo
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

Titanic = pd.read_csv('/content/Titanic.csv')

Titanic.head()

"""EDA

"""

Titanic.isnull()

"""sea-born library for visualization"""

sns.heatmap(Titanic.isnull(),yticklabels=False, cbar=False, cmap = 'viridis')

sns.set_style('whitegrid')
sns.countplot(x = 'Survived', data=Titanic)

sns.set_style('whitegrid')
sns.countplot(x='Survived',hue='Sex', data=Titanic)

sns.set_style('whitegrid')
sns.countplot(x='Survived', hue='Pclass', data=Titanic)

sns.distplot(Titanic['Age'].dropna(), kde=False, bins=30)

sns.countplot(x='SibSp', data=Titanic)

"""Data Cleaning"""

plt.figure(figsize=(12, 7))
sns.boxplot(x='Pclass',y='Age',data=Titanic,palette='winter')

def impute_age(cols):
  Age = cols[0]
  pclass = cols[1]
  if pd.isnull(Age):
    if pclass == 1:
      return 37

    elif pclass == 2:
      return 29
    else:
      return 24
  else:
    return Age

# now TApplying the function
Titanic['Age'] = Titanic[['Age','Pclass']].apply(impute_age,axis=1)

sns.heatmap(Titanic.isnull(),yticklabels=False, cbar=False, cmap='viridis')

Titanic.drop('Cabin', axis=1, inplace = True)

Titanic.head()

Titanic.dropna(inplace=True)

Titanic.info()

pd.get_dummies(Titanic['Embarked'],drop_first=True).head()

sex = pd.get_dummies(Titanic['Sex'],drop_first=True)
embark = pd.get_dummies(Titanic['Embarked'],drop_first=True)

Titanic.drop(['Sex','Embarked','Name','Ticket'],axis=1,inplace=True)

Titanic.head()

Titanic = pd.concat([Titanic,sex,embark],axis=1)

Titanic.head()

Titanic = pd.concat([Titanic,sex,embark],axis=1)

Titanic.head()

"""Building Logistic Regression Model
Train Test Split
"""

Titanic.drop('Survived',axis=1).head()

Titanic['Survived'].head()

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(Titanic.drop('Survived',axis=1),
                                                    Titanic['Survived'],test_size=0.30,
                                                    random_state=101)

# Training and Predicting
from sklearn.linear_model import LogisticRegression

logmoel = LogisticRegression()
logmoel.fit(x_train,y_train)

prediction= logmoel.predict(x_test)

from sklearn.metrics import confusion_matrix

accuracy= confusion_matrix(y_test,prediction)

accuracy

from sklearn.metrics import accuracy_score

accuracy= accuracy_score(y_test,prediction)
accuracy

prediction